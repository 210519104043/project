{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\SILARA\\\\Desktop\\\\React Project\\\\my-project\\\\src\\\\Component\\\\product.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Product() {\n  _s();\n  const [categories, setCategories] = useState([]);\n  useEffect(() => {\n    fetch('https://fakestoreapi.com/products/categories').then(response => response.json()).then(data => setCategories(data)).catch(error => console.error('Error fetching categories:', error));\n  }, []);\n  const getImagePath = category => {\n    const sanitizedCategory = category.toLowerCase().replace(/ /g, '-') // Replace spaces with dashes\n    .replace(/[^a-z0-9-]/g, ''); // Remove non-alphanumeric characters\n\n    // Here, use the template literal correctly to form the path\n    const imagePath = `/images/${sanitizedCategory}.jpg`;\n    console.log(\"Image path:\", imagePath);\n    return imagePath;\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-product-container\",\n      children: categories.length > 0 ? categories.map(category => {\n        const imagePath = getImagePath(category);\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"products-card\",\n          children: [/*#__PURE__*/_jsxDEV(Link, {\n            to: `/${category.toLowerCase().replace(/ /g, '')}`,\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: imagePath,\n              alt: category,\n              onError: e => {\n                // Fallback to a default image if error occurs (e.g., image not found)\n                e.target.src = '/images/default.jpg';\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 37,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 36,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n            children: category\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Explore the latest in \", category.toLowerCase(), \" products.\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 17\n          }, this)]\n        }, category, true, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 15\n        }, this);\n      }) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading categories...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n_s(Product, \"+ijgB8ROEl0Dkz53OTIi8GynN6s=\");\n_c = Product;\nexport default Product;\nvar _c;\n$RefreshReg$(_c, \"Product\");","map":{"version":3,"names":["React","useState","useEffect","Link","jsxDEV","_jsxDEV","Fragment","_Fragment","Product","_s","categories","setCategories","fetch","then","response","json","data","catch","error","console","getImagePath","category","sanitizedCategory","toLowerCase","replace","imagePath","log","children","className","length","map","to","src","alt","onError","e","target","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/SILARA/Desktop/React Project/my-project/src/Component/product.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\nfunction Product() {\r\n  const [categories, setCategories] = useState([]);\r\n\r\n  useEffect(() => {\r\n    fetch('https://fakestoreapi.com/products/categories')\r\n      .then((response) => response.json())\r\n      .then((data) => setCategories(data))\r\n      .catch((error) => console.error('Error fetching categories:', error));\r\n  }, []);\r\n\r\n  const getImagePath = (category) => {\r\n    const sanitizedCategory = category\r\n      .toLowerCase()\r\n      .replace(/ /g, '-')  // Replace spaces with dashes\r\n      .replace(/[^a-z0-9-]/g, ''); // Remove non-alphanumeric characters\r\n\r\n    // Here, use the template literal correctly to form the path\r\n    const imagePath = `/images/${sanitizedCategory}.jpg`;\r\n    console.log(\"Image path:\", imagePath);\r\n    return imagePath;\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"card-product-container\">\r\n        {categories.length > 0 ? (\r\n          categories.map((category) => {\r\n            const imagePath = getImagePath(category);\r\n            return (\r\n              <div key={category} className=\"products-card\">\r\n                {/* Corrected the Link to use template literals properly */}\r\n                <Link to={`/${category.toLowerCase().replace(/ /g, '')}`}>\r\n                  <img\r\n                    src={imagePath}\r\n                    alt={category}\r\n                    onError={(e) => {\r\n                      // Fallback to a default image if error occurs (e.g., image not found)\r\n                      e.target.src = '/images/default.jpg';\r\n                    }}\r\n                  />\r\n                </Link>\r\n                <h2>{category}</h2>\r\n                <p>Explore the latest in {category.toLowerCase()} products.</p>\r\n              </div>\r\n            );\r\n          })\r\n        ) : (\r\n          <p>Loading categories...</p>\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Product;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}